from __future__ import annotations
from typing import Optional
import os
import pandas as pd
from jinja2 import Template

TEMPLATE = """<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>spotify_playlist_optimizer — Report</title>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<style>
body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 24px; }
h1,h2 { margin: 0.2em 0; }
.section { margin: 20px 0; }
code, pre { background: #f6f8fa; padding: 2px 4px; border-radius: 4px; }
table { border-collapse: collapse; width: 100%; }
th, td { border-bottom: 1px solid #ddd; padding: 6px 8px; text-align: left; }
img { max-width: 100%; height: auto; border: 1px solid #eee; border-radius: 4px; }
.note { color: #666; font-size: 0.9em; }
</style>
</head>
<body>
<h1>spotify_playlist_optimizer — Analysis Report</h1>
<div class="section">
  <p><strong>Playlist:</strong> {{ playlist_name }}</p>
  <p><strong>Tracks analyzed:</strong> {{ n_tracks }}</p>
  <p><strong>Avg edge similarity (loop candidate):</strong> {{ avg_sim }}</p>
</div>

<div class="section">
  <h2>Similarity Heatmap</h2>
  {% if heatmap_path %}<img src="{{ heatmap_path }}" alt="Similarity heatmap"/>{% else %}<p class="note">No heatmap available.</p>{% endif %}
</div>

<div class="section">
  <h2>2-D Embedding Maps</h2>
  <div>
    {% if pca_path %}<p><strong>PCA:</strong></p><img src="{{ pca_path }}" alt="PCA map"/>{% else %}<p class="note">No PCA map.</p>{% endif %}
  </div>
  <div style="margin-top:12px;">
    {% if umap_path %}<p><strong>UMAP:</strong></p><img src="{{ umap_path }}" alt="UMAP map"/>{% else %}<p class="note">UMAP not generated (install umap-learn).</p>{% endif %}
  </div>
</div>

<div class="section">
  <h2>Neighbor & Weakest-Pair Tables</h2>
  <ul>
    <li>Top-k neighbors CSV: <code>{{ topk_csv }}</code></li>
    <li>Weakest pairs CSV: <code>{{ weakest_csv }}</code></li>
  </ul>
</div>

<div class="section note">
  <p>Generated by <em>spotify_playlist_optimizer</em>.</p>
</div>
</body>
</html>
"""

def render_report(
    out_html: str,
    playlist_name: str,
    n_tracks: int,
    avg_sim: Optional[float],
    heatmap_path: Optional[str],
    pca_path: Optional[str],
    umap_path: Optional[str],
    topk_csv: Optional[str],
    weakest_csv: Optional[str],
):
    t = Template(TEMPLATE)
    html = t.render(
        playlist_name=playlist_name,
        n_tracks=n_tracks,
        avg_sim=f"{avg_sim:.4f}" if avg_sim is not None else "n/a",
        heatmap_path=heatmap_path,
        pca_path=pca_path,
        umap_path=umap_path,
        topk_csv=topk_csv,
        weakest_csv=weakest_csv,
    )
    with open(out_html, "w", encoding="utf-8") as f:
        f.write(html)
    return out_html
